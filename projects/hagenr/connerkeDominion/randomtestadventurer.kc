//
//  randomtestadventurer.c
//  assignment-4
//
//  Created by Kevin Conner on 10/28/17.
//  Copyright Â© 2017 Kevin Conner. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include "dominion_helpers.h"
#include "randomtestcard.h"

// randomly draw and then discard the same amount of cards to randomize the amount of cards in the deck and discard pile for each test.
void randomDrawDiscard(struct gameState *g)
{
    int i;
    int n = rand() % (g->deckCount[0] + 1);
    
    for (i = 0; i < n; i++)
    {
        drawCard(0, g);
        discardCard(*(g->handCount-1), 0, g, 0);
    }
}

// return true if arrays are equal false otherise
int kcardcheck(int k[], int orig[])
{
    int i;
    for (i = 0; i < 10; i++)
    {
        if (k[i] != orig[i]) {
            printf("Failed: Kingdom cards changed\n");
            return 0;
        }
    }
    printf("Passed: Kingdom cards are unchanged\n");
    return 1;
}

// tests return value of program
void retvaluecheck(int retvalue)
{
    if (retvalue == 0) {
        printf("Passed: Program didn't crash.\n");
    } else {
        printf("Failed: Program crashed\n");
    }
}

// tests for correct number of cards in hand 
void handcheck(struct gameState *preg, struct gameState *postg)
{
    int pretreasure = 0;
    int posttreasure = 0;
    
    int i;
    
    if (preg->handCount+2 == postg->handCount) {
        printf("Passed: Correct number of cards in hand.\n");
    } else {
        printf("Failed: Incorrect number of cards in hand.\n");
    }
    
    for (i = 0; i < preg->handCount[0]; i++) {
        if (preg->hand[0][i] == copper || preg->hand[0][i] == silver || preg->hand[0][i] == gold) {
            pretreasure++;
        }
    }
    
    for (i = 0; i < postg->handCount[0]; i++) {
        if (postg->hand[0][i] == copper || postg->hand[0][i] == silver || postg->hand[0][i] == gold) {
            posttreasure++;
        }
    }
    
    if (pretreasure+2 == posttreasure) {
        printf("Passed: Correct number of treasure cards in hand.\n");
    } else {
        printf("Failed: Incorrect number of treasure cards in hand.\n");
    }
}

// tests for correct number of cards in deck
void deckcheck(struct gameState *preg, struct gameState *postg)
{
    int discarddiff = postg->discardCount[0] - preg->discardCount[0];
    int handdiff = postg->handCount[0] - preg->handCount[0];
    int totaldiff = discarddiff + handdiff;
    
    if (postg->deckCount[0] == (preg->deckCount[0]-totaldiff)) {
        printf("Passed: Correct number of cards in deck.\n");
    } else {
        printf("Failed: Incorrect number of cards in deck.\n");
    }
}

void opponenthandcheck(struct gameState *preg, struct gameState *postg)
{
    int flag = 1;
    int i;
    int card1, card2;
    
    for (i = 0; i < preg->handCount[1]; i++) {
        card1 = preg->hand[1][i];
        card2 = postg->hand[1][i];
        if (card1 != card2) {
            flag = 0;
        }
    }
    if (flag) {
        printf("Passed: Opponent's hand contains the correct cards.\n");
    } else {
        printf("Failed: Opponent's hand was altered.\n");
    }
}

void checkState(struct gameState pregs, struct gameState postgs)
{
    if (pregs.numPlayers == postgs.numPlayers) {
        printf("Passed: numPlayers unchanged.\n");
    } else {
        printf("Failed: numPlayers changed.\n");
    }
    
    if (! memcmp(pregs.supplyCount, postgs.supplyCount, (treasure_map+1) * sizeof(int))) {
        printf("Passed: supplyCount unchanged.\n");
    } else {
        printf("Failed: supplyCount changed.\n");
    }
    
    if (! memcmp(pregs.embargoTokens, postgs.embargoTokens, (treasure_map+1) * sizeof(int))) {
        printf("Passed: embargoTokens unchanged.\n");
    } else {
        printf("Failed: embargoTokens changed.\n");
    }
    
    if (pregs.outpostPlayed == postgs.outpostPlayed) {
        printf("Passed: outpostPlayed unchanged.\n");
    } else {
        printf("Failed: outpostPlayed changed.\n");
    }
    
    if (pregs.outpostTurn == postgs.outpostTurn) {
        printf("Passed: outpostTurn unchanged.\n");
    } else {
        printf("Failed: outpostTurn changed.\n");
    }
    
    if (pregs.whoseTurn == postgs.whoseTurn) {
        printf("Passed: whosePlayed unchanged.\n");
    } else {
        printf("Failed: whosePlayed changed.\n");
    }
    
    if (pregs.phase == postgs.phase) {
        printf("Passed: phase unchanged.\n");
    } else {
        printf("Failed: phase changed.\n");
    }
    
    if (pregs.numActions == postgs.numActions) {
        printf("Passed: numActions unchanged.\n");
    } else {
        printf("Failed: numActions changed.\n");
    }
    
    if (pregs.coins == postgs.coins) {
        printf("Passed: coins unchanged.\n");
    } else {
        printf("Failed: coins changed.\n");
    }
    
    if (pregs.numBuys == postgs.numBuys) {
        printf("Passed: numBuys unchanged.\n");
    } else {
        printf("Failed: numBuys changed.\n");
    }
}

int main()
{
    srand(time(NULL));
    
    struct gameState *postg;
    struct gameState preg;
    int seed;
    int retvalue;
    int i;
    
    int postk[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, remodel};
    int prek[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, remodel};
    
    // execute 5 random tests
    for (i = 0; i < 5; i++)
    {
        printf("\nInitializing adventurer card test %d with random seed\n", i+1);
        seed = rand() % 101;
        postg = NULL;
        postg = newGame();
        initializeGame(2, postk, seed, postg);
        
        // randomize cards drawn and discarded before tests
        randomDrawDiscard(postg);
        preg = *postg;
        
        // run program
        retvalue = adventurer_card(postg, 0);
        
        // begin tests
        retvaluecheck(retvalue);
        handcheck(&preg, postg);
        deckcheck(&preg, postg);
        opponenthandcheck(&preg, postg);
        checkState(preg, *postg);
        kcardcheck(postk, prek);
    }
    return 0;
}
